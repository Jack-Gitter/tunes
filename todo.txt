tunes todos:

golang stufff
    wtf are type assertions really?
    
testing: 
    actually in depth tests of what the fuck it is that I have!!!


go specific stuff: why does type validation have to be a pointer to an obejct?
errors: 
    make package level sentinel errors -- 
        for database, still parse the db errors but return an error which is sentinel error from handledberror func
        for jwt, do something similar because jwt errors also have error codes or something -- we are checking this in the expiredJWT, so create custom sentinels and then 
    make a middleware to handle these errors
        take the first error that was thrown, generate a statuts code, and then done

endpoints: 
    general: 
        clean up endpoint names
    user
        followers pagination -- broken
    posts
        postpreviewpagination -- broken
        like another post
        unlike a post
    comments
        create
        read (paginated)
        update
        delete
        
caching:
    redis 
        read up on caching techniques!!! 

dockerize:
    postgres
    redis

admin: 
    cors

caching questions: 
    i validate cadhe on every data change — what about data race with get and data change where data change clears cache but get reaches db first and caches data?
    also updating cache after db writes — we have one post then another which changes a value. A hits db first then b, but b writes to cache first then a. how to prevent?

testing:
    implement tests -- e2e test with testing library!
    implement a git workflow to run tests on push

general: 
    swagger?
    rework file structure?

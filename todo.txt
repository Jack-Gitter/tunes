tunes todos:

golang stufff
    wtf are type assertions really?
    
testing: 
    actually in depth tests of what the fuck it is that I have!!!


errors: 
    make package level sentinel errors -- 
        for database, make errors and parse the sql errors into our sentinel errors
        for jwt, just return custom errors
        for other stuff, just return custom errors
    make a middleware to handle these errors
        take the first error that was thrown, generate a statuts code, and then done

endpoints: 
    general: 
        clean up endpoint names
    user
        followers pagination -- broken
    posts
        postpreviewpagination -- broken
        like another post
        unlike a post
    comments
        create
        read (paginated)
        update
        delete
        
caching:
    redis 
        read up on caching techniques!!! 

dockerize:
    postgres
    redis

admin: 
    cors

caching questions: 
    i validate cadhe on every data change — what about data race with get and data change where data change clears cache but get reaches db first and caches data?
    also updating cache after db writes — we have one post then another which changes a value. A hits db first then b, but b writes to cache first then a. how to prevent?

testing:
    implement tests -- e2e test with testing library!
    implement a git workflow to run tests on push

general: 
    swagger?
    rework file structure?

definitions:
  requests.CreateCommentDTO:
    properties:
      commentText:
        type: string
    type: object
  requests.CreatePostDTO:
    properties:
      rating:
        type: integer
      songID:
        type: string
      text:
        type: string
    type: object
  requests.UpdateCommentDTO:
    properties:
      commentText:
        type: string
    type: object
  requests.UpdatePostRequestDTO:
    properties:
      rating:
        type: integer
      review:
        type: string
    type: object
  requests.UpdateUserRequestDTO:
    properties:
      bio:
        type: string
      userRole:
        $ref: '#/definitions/responses.Role'
    type: object
  responses.Comment:
    properties:
      commentID:
        type: integer
      commentText:
        type: string
      commentorID:
        type: string
      commentorUsername:
        type: string
      createdAt:
        type: string
      dislikes:
        type: integer
      likes:
        type: integer
      postSpotifyID:
        type: string
      songID:
        type: string
      updatedAt:
        type: string
    type: object
  responses.PaginationResponse-array_responses_Comment-time_Time:
    properties:
      dataResponse:
        items:
          $ref: '#/definitions/responses.Comment'
        type: array
      paginationKey:
        type: string
    type: object
  responses.PaginationResponse-array_responses_User-string:
    properties:
      dataResponse:
        items:
          $ref: '#/definitions/responses.User'
        type: array
      paginationKey:
        type: string
    type: object
  responses.PostPreview:
    properties:
      albumArtURI:
        type: string
      albumID:
        type: string
      albumName:
        type: string
      createdAt:
        type: string
      dislikes:
        items:
          $ref: '#/definitions/responses.UserIdentifer'
        type: array
      likes:
        items:
          $ref: '#/definitions/responses.UserIdentifer'
        type: array
      rating:
        type: integer
      songID:
        type: string
      songName:
        type: string
      spotifyID:
        type: string
      text:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  responses.Role:
    enum:
    - BASIC
    - MODERATOR
    - ADMIN
    type: string
    x-enum-varnames:
    - BASIC_USER
    - MODERATOR
    - ADMIN
  responses.User:
    properties:
      bio:
        type: string
      role:
        $ref: '#/definitions/responses.Role'
      spotifyID:
        type: string
      username:
        type: string
    type: object
  responses.UserIdentifer:
    properties:
      spotifyID:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: jack.a.gitter@gmail.com
    name: Jack Gitter
  description: The backend REST API for Tunes
  title: Tunes backend API
  version: "1.0"
paths:
  /comments/{commentID}:
    get:
      consumes:
      - application/json
      description: Retrieves a comment
      parameters:
      - description: Comment ID of comment to retrieve
        in: path
        name: commentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Retrieves a comment
      tags:
      - Comments
  /comments/{spotifyID}/{songID}:
    post:
      consumes:
      - application/json
      description: Creates a comment for the current user
      parameters:
      - description: Information required to create a commment
        in: body
        name: CreatePostDTO
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCommentDTO'
      - description: spotifyID of poster
        in: path
        name: spotifyID
        required: true
        type: string
      - description: songID of post to make a comment on
        in: path
        name: songID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Creates a comment for the current user
      tags:
      - Comments
  /comments/admin/{commentID}:
    delete:
      consumes:
      - application/json
      description: Deletes a comment. Must be admin
      parameters:
      - description: Comment ID of comment to delete
        in: path
        name: commentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Deletes a comment Must be admin
      tags:
      - Comments
  /comments/current/{commentID}:
    delete:
      consumes:
      - application/json
      description: Deletes a comment for the current user
      parameters:
      - description: Comment ID of comment to delete
        in: path
        name: commentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Deletes a comment for the current user
      tags:
      - Comments
    patch:
      consumes:
      - application/json
      description: Updates a comment for the current user
      parameters:
      - description: Comment ID of comment to update
        in: path
        name: commentID
        required: true
        type: string
      - description: Comment data to update
        in: body
        name: UpdateCommentDTO
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateCommentDTO'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Updates a comment for the current user
      tags:
      - Comments
  /comments/dislike/{commentID}:
    post:
      consumes:
      - application/json
      description: Dislike a comment
      parameters:
      - description: Comment ID of comment to dislike
        in: path
        name: commentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Dislike a comment
      tags:
      - Comments
  /comments/like/{commentID}:
    post:
      consumes:
      - application/json
      description: Like a comment
      parameters:
      - description: Comment ID of comment to like
        in: path
        name: commentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Like a comment
      tags:
      - Comments
  /comments/votes/current/{commentID}:
    delete:
      consumes:
      - application/json
      description: Delete a vote on a comment for the current user
      parameters:
      - description: Comment ID of comment to remove the vote from
        in: path
        name: commentID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Delete a vote on a comment for the current user
      tags:
      - Comments
  /posts:
    post:
      consumes:
      - application/json
      description: Creates a post for the current user
      parameters:
      - description: Information required to create a post
        in: body
        name: CreatePostDTO
        required: true
        schema:
          $ref: '#/definitions/requests.CreatePostDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PostPreview'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Creates a post for the current user
      tags:
      - Posts
  /posts/{spotifyID}/{songID}:
    get:
      consumes:
      - application/json
      description: Get a specific post
      parameters:
      - description: The user who posted the song
        in: path
        name: spotifyID
        required: true
        type: string
      - description: The songID of the posted song
        in: path
        name: songID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PostPreview'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get apath specific post
      tags:
      - Posts
  /posts/admin/{spotifyID}/{songID}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific post. Only accessible to admins
      parameters:
      - description: The spotify ID of the user who posted the song
        in: path
        name: spotifyID
        required: true
        type: string
      - description: The songID of the posted song
        in: query
        name: songID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Deletes a specific post. Only accessible to admins
      tags:
      - Posts
  /posts/current/{songID}:
    delete:
      consumes:
      - application/json
      description: Gets the comments of a post
      parameters:
      - description: The songID of the posted song
        in: path
        name: songID
        required: true
        type: string
      - description: The user who posted the post spotify ID
        in: path
        name: spotifyID
        required: true
        type: string
      - description: Pagination Key. In the form of UTC timestamp
        in: query
        name: createdAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PaginationResponse-array_responses_Comment-time_Time'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Gets the comments of a post
      tags:
      - Posts
    get:
      consumes:
      - application/json
      description: Get a specific post for the current user
      parameters:
      - description: The songID of the posted song
        in: path
        name: songID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PostPreview'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get a specific post for the current user
      tags:
      - Posts
    patch:
      consumes:
      - application/json
      description: Updates a post made by the current user
      parameters:
      - description: The songID of the posted song
        in: path
        name: songID
        required: true
        type: string
      - description: The fields to update
        in: body
        name: UpdatePostDTO
        required: true
        schema:
          $ref: '#/definitions/requests.UpdatePostRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PostPreview'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Updates a post made by the current user
      tags:
      - Posts
  /posts/dislikes/{spotifyID}/{songID}:
    post:
      consumes:
      - application/json
      description: Dislikes a post for the current user
      parameters:
      - description: Song ID of the post to dislike
        in: path
        name: spotifyID
        required: true
        type: string
      - description: Spotify ID of the user who posted the song
        in: path
        name: songID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Dislikes a post for the current user
      tags:
      - Posts
  /posts/likes/{spotifyID}/{songID}:
    post:
      consumes:
      - application/json
      description: Likes a post for the current user
      parameters:
      - description: Song ID of the post to like
        in: path
        name: spotifyID
        required: true
        type: string
      - description: Spotify ID of the user who posted the song
        in: path
        name: songID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Likes a post for the current user
      tags:
      - Posts
  /posts/previews/users/{spotifyID}:
    get:
      consumes:
      - application/json
      description: Get all of a users post previews
      parameters:
      - description: The user whos posts are recieved. Value is a spotify ID
        in: path
        name: spotifyID
        required: true
        type: string
      - description: Pagination Key. Format is UTC timestamp
        in: query
        name: createdAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PostPreview'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all of a users post previews
      tags:
      - Posts
  /posts/previews/users/current:
    get:
      consumes:
      - application/json
      description: Get all of a users post previews
      parameters:
      - description: The user whos posts are recieved. Value is a spotify ID
        in: path
        name: spotifyID
        required: true
        type: string
      - description: Pagination Key. Format is UTC timestamp
        in: query
        name: createdAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PostPreview'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Get all of a users post previews
      tags:
      - Posts
  /posts/votes/current/{posterSpotifyID}/{songID}:
    delete:
      consumes:
      - application/json
      description: Removes a vote for the current user on a post
      parameters:
      - description: The songID of the posted song
        in: path
        name: songID
        required: true
        type: string
      - description: The user who posted the post spotify ID
        in: path
        name: posterSpotifyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Removes a vote for the current user on a post
      tags:
      - Posts
  /users/{spotifyID}:
    get:
      consumes:
      - application/json
      description: Gets a tunes user by their spotifyID
      parameters:
      - description: User Spotify ID
        in: path
        name: spotifyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Gets a tunes user by their spotify ID
      tags:
      - Users
  /users/{spotifyID}/followers/:
    get:
      consumes:
      - application/json
      description: Gets a users followers by their spotify ID
      parameters:
      - description: User spotify ID
        in: path
        name: spotifyID
        required: true
        type: string
      - description: Pagination Key for follow up responses. This key is a spotify
          ID
        in: query
        name: spotifyID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PaginationResponse-array_responses_User-string'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Gets a users followers by their spotify ID
      tags:
      - Users
  /users/admin/{spotifyID}:
    delete:
      consumes:
      - application/json
      description: Deletes a user account by spotify ID
      parameters:
      - description: Spotify ID of the user to delete
        in: path
        name: spotifyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Deletes a user account by spotify ID
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates a user by their spotify ID. Only accessable to admins
      parameters:
      - description: Information to update
        in: body
        name: UpdateUserDTO
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequestDTO'
      - description: Spotify ID of the user to update
        in: path
        name: spotifyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Updates a user by their spotify ID. Only accessable to admins
      tags:
      - Users
  /users/current:
    delete:
      consumes:
      - application/json
      description: Deletes the current user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Deletes the current user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Retreives the current user
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Updates the current user
      parameters:
      - description: Information to update
        in: body
        name: UpdateUserDTO
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequestDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.User'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Updates the current user
      tags:
      - Users
  /users/current/follow/{otherUserSpotifyID}:
    post:
      consumes:
      - application/json
      description: Follows a user for the current user
      parameters:
      - description: Spotify ID of other user to follow
        in: path
        name: otherUserSpotifyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Follows a user for the current user
      tags:
      - Users
  /users/current/followers/:
    get:
      consumes:
      - application/json
      description: Gets the current users followers
      parameters:
      - description: Pagination Key for follow up responses. This key is a spotify
          ID
        in: query
        name: spotifyID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.PaginationResponse-array_responses_User-string'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Gets the current users followers
      tags:
      - Users
  /users/current/unfollow/{otherUserSpotifyID}:
    delete:
      consumes:
      - application/json
      description: Unfollowers a user for the currently signed in user
      parameters:
      - description: User to unfollow spotify ID
        in: path
        name: otherUserSpotifyID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - Bearer: []
      summary: Unfollowers a user for the currently signed in user
      tags:
      - Users
securityDefinitions:
  Bearer:
    description: '"Authorization header value"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
